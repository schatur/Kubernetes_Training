Learning Objectives:-
Create a ConfigMap called `candy-service-config` to store the container's configuration data.
Create a Kubernetes secret called `db-password` to store the database password.
Create the pod for the candy-service application according to the provided specification.

Problem Statement:-
Your company is nearing completion of their new mobile app, a candy-themed game. This application has some backend infrastructure the company plans to run using Kubernetes. They want to begin deploying one of their backend services to the cluster and have asked you to create a pod definition that meets the specifications required by the software. Create a pod definition in /home/cloud_user/candy-service-pod.yml, and then create a pod in the cluster using this definition to make sure it works.

The specifications are as follows:

The current image for the container is linuxacademycontent/candy-service:1. You do not need a custom command or args.
There is some configuration data the container will need:

candy.peppermint.power=100000000
candy.nougat-armor.strength=10

It will expect to find this data in a file at /etc/candy-service/candy.cfg. Store the configuration data in a ConfigMap called candy-service-config and provide it to the container as a mounted volume.
The container will need to run with the file system group with the id 2000. You will need to set this using the securityContext.
The container should expect to use 64MiB of memory and 250m CPU (use resource requests).
The container should be limited to 128MiB of memory and 500m CPU (use resource limits).
The container needs access to a database password in order to authenticate with a backend database server. The password is Kub3rn3t3sRul3s!. It should be stored in a secure fashion (as a Kubernetes secret called db-password) and passed to the container as an environment variable called DB_PASSWORD.

Good luck!

--------------------------------------------------------------------
master $ cd /etc
master $ mkdir candy-service
master $ cd candy-service
master $ vi candy.cfg
candy.peppermint.power=100000000
candy.nougat-armor.strength=10
echo -n 'Kub3rn3t3sRul3s!' | base64
S3ViM3JuM3Qzc1J1bDNzIQ==

master $ vi secret.yml

apiVersion: v1
kind: Secret
metadata:
  name: db-password
stringData:
  DB_PASSWORD: S3ViM3JuM3Qzc1J1bDNzIQ==
  
kubectl create -f secret.yaml
secret/db-password created


master $ kubectl create -f secret.yml
secret/db-password created

master $ vi candy-service-config.yml

apiVersion : v1
kind: ConfigMap
metadata: 
   name: candy-service-config
data:
  config: |-
    ---
    :candy.peppermint.power: 100000000
    :candy.nougat-armor.strength: 10        



master $ kubectl create -f candy-service-config.yml
configmap/candy-service-config created


vi candy-service.yml

apiVersion: v1
kind: Pod
metadata:
  name: candy-service
  labels:
    app: web
spec:
  securityContext:
    fsGroup: 2000
  containers:
  - name: candy-service-ctr
    image: linuxacademycontent/candy-service:1
    env:
    - name: db-password
      valueFrom:
        secretKeyRef:
          name: db-password
          key: DB_PASSWORD
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        cpu: "500m"
        memory: "128Mi"
    volumeMounts:
    - name: candy-service-config
      mountPath: /etc/candy-service
  volumes:
  - name: candy-service-config
    configMap:
       name: candy-service-config
       items:
        - key: config
          path: candy.cfg      
		  

master $kubectl create -f candy-service.yml


master $ kubectl exec candy-service -- cat /etc/candy-service/candy.cfg
---
:candy.peppermint.power: 100000000
:candy.nougat-armor.strength: 10        
 master $ kubectl exec candy-service -- ls /etc/candy-service/
candy.cfg 

